// Copyright 2023 Tetrate
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { HttpHealthArgs, HttpHealthState } from "./httpHealth";
export type HttpHealth = import("./httpHealth").HttpHealth;
export const HttpHealth: typeof import("./httpHealth").HttpHealth = null as any;
utilities.lazyLoad(exports, ["HttpHealth"], () => require("./httpHealth"));

export { LocalCommandArgs, LocalCommandState } from "./localCommand";
export type LocalCommand = import("./localCommand").LocalCommand;
export const LocalCommand: typeof import("./localCommand").LocalCommand = null as any;
utilities.lazyLoad(exports, ["LocalCommand"], () => require("./localCommand"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "check:index/httpHealth:HttpHealth":
                return new HttpHealth(name, <any>undefined, { urn })
            case "check:index/localCommand:LocalCommand":
                return new LocalCommand(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("check", "index/httpHealth", _module)
pulumi.runtime.registerResourceModule("check", "index/localCommand", _module)
pulumi.runtime.registerResourcePackage("check", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:check") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
